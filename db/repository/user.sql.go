// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package repository

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  oauth_sub, email, name
) VALUES (
  $1, $2, $3
)
RETURNING id, oauth_sub, email, name
`

type CreateUserParams struct {
	OauthSub string
	Email    string
	Name     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.OauthSub, arg.Email, arg.Name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OauthSub,
		&i.Email,
		&i.Name,
	)
	return i, err
}

const createUserIfNotExist = `-- name: CreateUserIfNotExist :exec
INSERT INTO users (
  oauth_sub, email, name
) VALUES (
  $1, $2, $3
) ON CONFLICT DO NOTHING
`

type CreateUserIfNotExistParams struct {
	OauthSub string
	Email    string
	Name     string
}

func (q *Queries) CreateUserIfNotExist(ctx context.Context, arg CreateUserIfNotExistParams) error {
	_, err := q.db.Exec(ctx, createUserIfNotExist, arg.OauthSub, arg.Email, arg.Name)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, oauth_sub, email, name FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OauthSub,
		&i.Email,
		&i.Name,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, oauth_sub, email, name FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OauthSub,
		&i.Email,
		&i.Name,
	)
	return i, err
}

const getUserByOauthSub = `-- name: GetUserByOauthSub :one
SELECT id, oauth_sub, email, name FROM users
WHERE oauth_sub = $1 LIMIT 1
`

func (q *Queries) GetUserByOauthSub(ctx context.Context, oauthSub string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByOauthSub, oauthSub)
	var i User
	err := row.Scan(
		&i.ID,
		&i.OauthSub,
		&i.Email,
		&i.Name,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
  set name = $2
WHERE id = $1
`

type UpdateUserParams struct {
	ID   int32
	Name string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.ID, arg.Name)
	return err
}
