// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: feed.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type FeedAddItemsParams struct {
	EntryID       pgtype.Text
	Title         pgtype.Text
	Summary       pgtype.Text
	Link          string
	Content       pgtype.Text
	ItemUpdated   pgtype.Timestamptz
	ItemPublished pgtype.Timestamptz
	FeedID        int32
}

const feedCreate = `-- name: FeedCreate :one
INSERT INTO feeds (
    title, description,
    site_link, feed_link
) VALUES (
    $1, $2, $3, $4
)
RETURNING id
`

type FeedCreateParams struct {
	Title       pgtype.Text
	Description pgtype.Text
	SiteLink    pgtype.Text
	FeedLink    string
}

func (q *Queries) FeedCreate(ctx context.Context, arg FeedCreateParams) (int32, error) {
	row := q.db.QueryRow(ctx, feedCreate,
		arg.Title,
		arg.Description,
		arg.SiteLink,
		arg.FeedLink,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const feedGetItems = `-- name: FeedGetItems :many
SELECT id, entry_id, title, summary, link, content, item_updated, item_published, feed_id FROM feed_items
WHERE feed_id = $1
`

func (q *Queries) FeedGetItems(ctx context.Context, feedID int32) ([]FeedItem, error) {
	rows, err := q.db.Query(ctx, feedGetItems, feedID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedItem
	for rows.Next() {
		var i FeedItem
		if err := rows.Scan(
			&i.ID,
			&i.EntryID,
			&i.Title,
			&i.Summary,
			&i.Link,
			&i.Content,
			&i.ItemUpdated,
			&i.ItemPublished,
			&i.FeedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
